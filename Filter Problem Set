#include "helpers.h"
#include <math.h>
#include <cs50.h>

int redMax(int color1);
int blueMax(int color2);
int greenMax(int color3);

// Convert image to grayscale
void grayscale(int height, int width, RGBTRIPLE image[height][width])
{
    for (int row = 0; row < height; row++)
    {
        for (int col = 0; col < width; col++)
        {
            float average = (image[row][col].rgbtBlue + image[row][col].rgbtGreen + image[row][col].rgbtRed)/3.00;
            int avg = round(average);

            image[row][col].rgbtBlue = avg;
            image[row][col].rgbtGreen = avg;
            image[row][col].rgbtRed = avg;
        }
    }
    return;
}

// Convert image to sepia
void sepia(int height, int width, RGBTRIPLE image[height][width])
{
    for (int row = 0; row < height; row++)
    {
        for (int col = 0; col < width; col++)
        {
            int sepiaRed = round((0.393 * image[row][col].rgbtRed) + (0.769 * image[row][col].rgbtGreen) + (0.189 * image[row][col].rgbtBlue));
            int sepiaGreen = round((0.349 * image[row][col].rgbtRed) + (0.686 * image[row][col].rgbtGreen) + (0.168 * image[row][col].rgbtBlue));
            int sepiaBlue = round((0.272 * image[row][col].rgbtRed) + (0.534 * image[row][col].rgbtGreen) + (0.131 * image[row][col].rgbtBlue));

            image[row][col].rgbtBlue = blueMax(sepiaBlue);
            image[row][col].rgbtGreen = greenMax(sepiaGreen);
            image[row][col].rgbtRed = redMax(sepiaRed);
        }
    }
    return;
}

void swap(RGBTRIPLE *pixel1, RGBTRIPLE *pixel2)
{
    RGBTRIPLE temp = *pixel1;
    *pixel1 = *pixel2;
    *pixel2 = temp;
}

// Reflect image horizontally
void reflect(int height, int width, RGBTRIPLE image[height][width])
{
    for (int row = 0; row < height; row++)
    {
        for (int col = 0; col < width / 2; col++)
        {
            swap(&image[row][col], &image[row][width - 1 - col]);
        }
    }
    return;
}

// Blur image
void blur(int height, int width, RGBTRIPLE image[height][width])
{
    RGBTRIPLE temp[height][width];
    
    for (int i = 0; i < height; i++)
    {
        for (int j = 0; j < width; j++)
        {
            int sumBlue = 0;
            int sumRed = 0;
            int sumGreen = 0;
            float counter = 0.00;
            
            for (int k = -1; k < 2; k++)
            {
                for (int h = -1; h < 2; h++)
                {   
                    if (i + k < 0 || i + k > height - 1 || j + h < 0 || j + h > width - 1)
                    {
                        continue;
                    }
                    sumBlue += image[i + k][j + h].rgbtBlue;
                    sumRed += image[i + k][j + h].rgbtRed;
                    sumGreen += image[i + k][j + h].rgbtGreen;
                    
                    counter++;
                }
            }
            
            temp[i][j].rgbtRed = round(sumRed / counter);
            temp[i][j].rgbtGreen = round(sumGreen / counter);
            temp[i][j].rgbtBlue = round(sumBlue / counter);
        }
    }
    for (int i = 0; i < height; i++)
    {
        for (int j = 0; j < width; j++)
        {
            image[i][j].rgbtRed = temp[i][j].rgbtRed;
            image[i][j].rgbtGreen = temp[i][j].rgbtGreen;
            image[i][j].rgbtBlue = temp[i][j].rgbtBlue;
        }
    }
    return;
}

int redMax(int color1)
{
    if (color1 > 255)
    {
        color1 = 255;
    }
    return color1;
}

int blueMax(int color2)
{
    if (color2 > 255)
    {
        color2 = 255;
    }
    return color2;
}

int greenMax(int color3)
{
    if (color3 > 255)
    {
        color3 = 255;
    }
    return color3;
}
